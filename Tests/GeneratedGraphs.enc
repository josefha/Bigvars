
module GeneratedGraphs

import Bighash

local class Node
    val id : int
    var distance : int
    var color: int -- 0 black -- (1 gray) -- (2 -- white)
    var adjList : [Node]
    var isNode : bool
    def init(id:int) : unit
        this.id = id
        this.distance = 1000000
        this.color = 2
        this.isNode = false
    end

    def setAdjList(list:[Node]) : unit
        this.isNode = true
        this.adjList = list
    end

    def isNode() : bool
        this.isNode
    end
end

fun nodeID(node:int) : uint
    --var id = node.id
    EMBED (uint) (uint64_t) #{node}; END
end

fun nodeNodeID(node:Node) : uint
    var id = node.id
    EMBED (uint) (uint64_t) #{id}; END
end

fun GenerateAdjacencyList(input:String) : Bighash[int,Node]
    var sorted = new Bighash[Node,Node](fun(k:Node) => nodeNodeID(k))
    for pair <- input.split("\n") do
        var values = pair.split(",")
        var key = trimKeyToInt(values(0))
        var value = trimValueToInt(values(1))
        sorted.extend(new Node(key), new Node(value))
        sorted.extend(new Node(value), new Node(key))
    end

    var result = new Bighash[int,Node](fun(k:int) => nodeID(k))
    var keys = sorted.keys()

    for key <- keys do
        var values = sorted.getValues(key)
        var adjList = new[Node](|values|)
        repeat i <- |values| do
            adjList(i) = values(i)
        end

        var node = new Node(key.id)
        node.setAdjList(adjList)

        result.put(key.id,node)
    end

    consume result
end

fun printGraph(graph: Bighash[int,Node]) : unit
    var keys = graph.keys()
    for key <- keys do
        var node = graph.get(key)
        print("\n Node: {} dist: {}  [",key,node.distance)
        for value <- node.adjList do
            print(" {} ",value.id)
        end
        print("]")
    end
    println("")
end

fun trimKeyToInt(str:String) : int
    var keystr = ""
    match str.substring(1,str.length()) with
        case Just(s) => keystr = s
        case _ => keystr = ""
    end
    match keystr.to_int() with
        case Just(n) => n
        case _ => 0
    end
end

fun trimValueToInt(str:String) : int
    var keystr = ""
    match str.substring(0,str.length()-1) with
        case Just(s) => keystr = s
        case _ => keystr = ""
    end
    match keystr.to_int() with
        case Just(n) => n
        case _ => -1
    end
end

-- java GraphGen 20 3
fun simpleGraph() : String
    "(0,1)
(1,2)
(2,0)
(3,0)
(3,2)
(4,1)
(4,2)
(5,0)
(5,1)
(5,3)
(6,1)
(6,2)
(6,3)
(7,2)
(7,3)
(8,2)
(8,5)
(9,0)
(9,3)
(9,5)
(10,2)
(10,5)
(11,2)
(11,5)
(12,3)
(12,5)
(12,10)
(13,2)
(13,10)
(14,2)
(14,6)
(14,12)
(15,3)
(15,9)
(16,1)
(16,2)
(17,4)
(17,9)
(17,15)
(18,0)
(18,1)
(18,3)
(19,2)
(19,3)
(19,5)"
end
