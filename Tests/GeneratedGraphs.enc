
module GeneratedGraphs

import Bighash

fun intID(key : int) : uint
    EMBED (uint) (uint64_t) #{key}; END
end

fun GenerateAdjacencyList(input:String) : Bighash[int,int]
    var result = new Bighash[int,int](fun(k:int) => intID(k))
    for pair <- input.split("\n") do
        var values = pair.split(",")
        var key = trimKeyToInt(values(0))
        var value = trimValueToInt(values(1))
        result.extend(key, value)
        result.extend(value, key)
    end
    consume result
end

fun trimKeyToInt(str:String) : int
    var keystr = ""
    match str.substring(1,str.length()) with
        case Just(s) => keystr = s
        case _ => keystr = ""
    end
    match keystr.to_int() with
        case Just(n) => n
        case _ => 0
    end
end

fun trimValueToInt(str:String) : int
    var keystr = ""
    match str.substring(0,str.length()-1) with
        case Just(s) => keystr = s
        case _ => keystr = ""
    end
    match keystr.to_int() with
        case Just(n) => n
        case _ => -1
    end
end

fun printGraph(graph: Bighash[int,int]) : unit
    var keys = graph.keys()
    for key <- keys do
        print("\n {}: ",key)
        for value <- graph.getValues(key) do
            print(" {} ",value)
        end
    end
    println("")
end

-- java GraphGen 20 3
fun simpleGraph() : String
    "(0,1)
(1,2)
(2,0)
(3,0)
(3,2)
(4,1)
(4,2)
(5,0)
(5,1)
(5,3)
(6,1)
(6,2)
(6,3)
(7,2)
(7,3)
(8,2)
(8,5)
(9,0)
(9,3)
(9,5)
(10,2)
(10,5)
(11,2)
(11,5)
(12,3)
(12,5)
(12,10)
(13,2)
(13,10)
(14,2)
(14,6)
(14,12)
(15,3)
(15,9)
(16,1)
(16,2)
(17,4)
(17,9)
(17,15)
(18,0)
(18,1)
(18,3)
(19,2)
(19,3)
(19,5)"
end
