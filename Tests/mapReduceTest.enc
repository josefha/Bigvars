
import MapReduce
import Bighash

active class Main
    def main() : unit
        println("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
        --testHash()

        var input = dataInput().split(".")
        var data = generateFromStringArray(input) -- bigvar

        data.getInfo()

        var mapReduce = new MapReduce[int,String,String,int,int](0)

        var mapf = fun(key:int,value:String) => map(key,value)
        var reducef = fun(key:String,values:[int]) => reduce(key,values)

        mapReduce.run(data, mapf, reducef)
        ()
    end
end

-- wordCount
fun map(key:int,value:String) : [(String,int)]
    var words = value.split(" ")
    var result = new[(String,int)](|words|)
    repeat i <- |words| do
        result(i) = (words(i),1)
    end
    result
end

fun reduce(key:String,values:[int]) : (String,int)
    var sum = 0
    for value <- values do
        sum += value
    end
    (key,sum)
end

fun testHash() : unit
    var hashtable = new Bighash[String, int]()

    var key1 = "1"
    var key2 = "2"
    var key3 = "3"
    var key4 = "4"
    var key5 = "5"
    var key6 = "6"
    hashtable.put(key1,11111)
    hashtable.put(key2,21222)
    -- hashtable.extendAll(key2,[22222,2123,566,22])
    hashtable.extend(key2,9999)
    var values = hashtable.getValues(key2)
    for value <- values do
        println(value)
    end

    hashtable.put(key3,333333)
    hashtable.put(key4,444444)
    hashtable.put(key5,555555)

    println(hashtable.hasKey(key3))
    println(hashtable.get(key3))
end

fun dataInput() : String
    "The Programming Languages Group at Uppsala University is developing a programming language called Encore.
    Encore is a object oriented language with the actor model and a focus on parallelism.
    The compiler is written in Haskell and translates Encore code to C code, which can then be compiled with a C compiler.
    The project assignment is to extend the features of Encore and implement a library for Bigvars.
    'Arrays in Encore are stored in one actor resulting in operations on arrays being executed sequentially.
    Encore is also lacking syntactic support for easy programming of data structures distributed across actors.
    Bigvars will be a data type with a collection of values that are distributed among many actors.
    Operations on Bigvars could therefor be executed in parallel.
    Bigvars would also make it easier syntactically for the programer to programming with big collections of data.
    For example if you have an Bigvar of customer objects,
    then doing `.account` would automatically apply the `.account` method to all customers.
    One possible implementation of Bigvars in Encore would be to split the data between many
    actors and have all those actors report to other actors that act like supervisors.
    The supervisors would coordinate all workers and hold meta information about specific parts of the Bigvar.
    I will start the project with researching similar implementation in other languages, like Julias distributed arrays and Java 8 parallel streams.
    I will then decide how to best implement Bigvars in Encore.
    Most of the time will be spent on the actually implementation, Bigvars will be implemented as a library written in Encore.
    The first step of the implementation part will be to provide support for distributed arrays with basic array functionality
    and with a fixed number of underlying actors. The second step will be to have a dynamic number of underlaying actors and add
    some advanced functionality like object method calls and math functions. The third step will be to provide similar support
    as for distributed arrays to distributed Hash-tables. Lastly research if syntactical support from the encore compiler is
    needed and if it is devise a syntax, a compilation scheme and implement it. Also investigate and possible implement support
    for more datatypes such as distributed Sets. Tests and measurements of my implementation is also a priority.
    The Programming Languages Group at Uppsala University is developing a programming language called Encore.
    Encore is a object oriented language with the actor model and a focus on parallelism.
    The compiler is written in Haskell and translates Encore code to C code, which can then be compiled with a C compiler.
    The project assignment is to extend the features of Encore and implement a library for Bigvars.
    'Arrays in Encore are stored in one actor resulting in operations on arrays being executed sequentially.
    Encore is also lacking syntactic support for easy programming of data structures distributed across actors.
    Bigvars will be a data type with a collection of values that are distributed among many actors.
    Operations on Bigvars could therefor be executed in parallel.
    Bigvars would also make it easier syntactically for the programer to programming with big collections of data.
    For example if you have an Bigvar of customer objects,
    then doing `.account` would automatically apply the `.account` method to all customers.
    One possible implementation of Bigvars in Encore would be to split the data between many
    actors and have all those actors report to other actors that act like supervisors.
    The supervisors would coordinate all workers and hold meta information about specific parts of the Bigvar.
    I will start the project with researching similar implementation in other languages, like Julias distributed arrays and Java 8 parallel streams.
    I will then decide how to best implement Bigvars in Encore.
    Most of the time will be spent on the actually implementation, Bigvars will be implemented as a library written in Encore.
    The first step of the implementation part will be to provide support for distributed arrays with basic array functionality
    and with a fixed number of underlying actors. The second step will be to have a dynamic number of underlaying actors and add
    some advanced functionality like object method calls and math functions. The third step will be to provide similar support
    as for distributed arrays to distributed Hash-tables. Lastly research if syntactical support from the encore compiler is
    needed and if it is devise a syntax, a compilation scheme and implement it. Also investigate and possible implement support
    for more datatypes such as distributed Sets. Tests and measurements of my implementation is also a priority.
    end"
end
