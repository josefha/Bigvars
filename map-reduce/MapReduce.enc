
module MapReduce

import Bighash

local class MapReduce[k1,v1,k2,v2,v3]

    var hasher : v1 -> uint

    def init(hasher: v1 -> uint): unit
        this.hasher = hasher
    end

    def run(data:Bighash[k1,v1], m:(k1,v1)->[(v1,k1)], r:(k2,[v2]) -> (k2,v2)): unit

        var result = new Bighash[v1,k1](this.hasher)
        --var mapResult = data.mapper(m,result)

        --var sortedData = this.sort(mapResult)
        ()
    end

    -- def prepare(data:Bighash[k1,v1]) : Bighash[k1,v1]
    --     data
    -- end

    -- def sort(result: [Fut[[[(v1,k1)]]]]) : Bighash[v1,k1]
    --end

    -- def reduce() : unit
    --     ()
    -- end
    --
    -- def produce() : unit
    --     ()
    -- end
end
