
module MapReduce

import Bighash

local class MapReduce[k1,v1,k2,v2,v3]

    var key : k1
    var hashtable : Bighash[k2,[v2]]

    def init(key:k1) : unit
        this.hashtable = new Bighash[k2, [v2]]()
        --fix for testing and going forward
        this.key = key
    end


    def run(data:v1, m:(k1,v1)->[(k2,v2)], r:(k2,[v2]) -> (k2,v2)): unit
        var datasplit = [data] --this.prepare()

        var pairs = new[Fut[[(k2,v2)]]](|datasplit|)

        repeat i <- |datasplit| do
            var mapper = new Mapper[k1,v1,k2,v2](this.key,datasplit(i))
            pairs(i) = mapper ! map(m)
        end

        for pairlist <- pairs do
            this.shuffle(get(pairlist))
        end
    end

    def prepare() : unit
        ()
    end


    -- [(jag,1),(Ã¤r,1),(jag,1)] etc
    def shuffle(data:[(k2,v2)]) : unit
        -- for pair <- data do
        --     key = pair.0
        --     value = pair.0
        --     if(this.hashtable.hasKey(key)) then
        --         var value = hashtable.get(key)
        --         hashtable.put(newValue)
        --     end
        -- end
        ()
    end

    def reduce() : unit
        ()
    end

    def produce() : unit
        ()
    end

    def readfile(name:String) : [String]

        -- EMBED (unit)
        -- #include <stdio.h>
        -- #include <stdlib.h>
        -- BODY
        -- FILE * fPointer;
        -- fPointer = fopen("file.txt","r")
        -- fclose(fPointer)
        -- END

        ["asd"]
    end
end

active class Mapper[k1,v1,k2,v2]

    var data : v1
    var key : k1
    var result : [(k2,v2)]

    def init(key:k1,data: v1) : unit
        this.data = data
        this.key = key
    end

    -- key: row number?
    -- data: "jag heter josef och jag gillar encore.
    -- result: [(jag,1),(heter,1),(josef,1)(jag,1)] etc
    def map(m:(k1,v1)->[(k2,v2)]) : [(k2,v2)]
        --transform input records into a intermediate records
        var result = m(this.key,this.data)
        result
    end
end
-- local class Iterator[t]
--     def next() : t
--         ()
--     end
--     def has_next() : bool
--         ()
--     end
--     def remove() : bool
--         ()
--     end
-- end
