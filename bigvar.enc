-- preferodal atchensame / encore case study

module Bigvar

import Supervisor

trait BasicBigvar[t]
    require var size : int

    def createbigvar(array:[t]) : Bigvar[t]
        new Bigvar[t](array)
    end
end

passive class Bigvar[t] : BasicBigvar[t]
    var size : int
    var numsupr : int
    var supr : [(Supr[t],int,int)]

    def init(array:[t]) : unit
        this.size = |array|
        var suprvisor = new Supr[t](array)
        this.supr = [(suprvisor,0,this.size-1)]
    end

    def first() : Supr[t]
        this.supr(0).0
    end

    def size() : int
        this.size
    end

    def toarray() : [t]
        this.first().toarray()
    end

    def atindex(index: int) : t
      this.owner(index).atindex(index)
    end

    -- When we have more supr change this
    def owner(index: int) : Supr[t]
        this.first()
    end

    def applyto(index:int, f : t -> t) : unit
      this.owner(index).applyto(index,f)
    end

    def map(f : t -> t) : unit
        for supervisorinfo <- this.supr do
            var supr = supervisorinfo.0
            supr.map(f)
        end
    end

    def print(f: t->String) : unit
        this.first().printArray(f)
    end

    -- def printi() : unit
    --     var func = fun(v:t) => fun(v:int) => string_from_int(v)
    --     this.print(func)
    -- end
end
