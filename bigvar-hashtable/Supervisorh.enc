

module Supervisorh

import Siphash
import Workerh


trait GererateHash
  def modulo(value : uint, mod : uint) : uint
    EMBED (uint)
      uint64_t value = (uint64_t) #{value};
            uint64_t mod   = (uint64_t) #{mod};
            (value % mod);
    END
  end
end


local class Supervisor[k,v]
    var numOfWorkers: int
    var workers : [(Worker[k,v])]
    var tableSize : int
    var siphash: Siphash

    def init() : unit
        this.siphash = new Siphash()
        this.numOfWorkers = 4
        this.workers = new[Worker[k,v]](this.numOfWorkers)
        this.tableSize = 128*this.numOfWorkers
        this.initTable()
    end

    def initTable() : unit
        repeat i <- this.numOfWorkers do
            this.workers(i) = new Worker[k,v](129,i)
        end
    end

    def generateHash(key:k) : uint
        val pointer = EMBED (uint) (uint64_t) #{key}.p; END
        val hash = this.siphash.hash(pointer)
        hash
    end

    def put(key:k,value:v) : Fut[unit]
        var hash = this.generateHash(key)
        var workerID = hash % this.numOfWorkers
        this.workers(workerID) ! put(key,value,hash)
    end

    def get(key:k) : v
        var hash = this.generateHash(key)
        var workerID = hash % this.numOfWorkers
        get(this.workers(workerID) ! get(key,hash))
    end

    def getMany(keys:[k]) : [v]
        var values = new[Fut[v]](|keys|)
        repeat i <- |values| do
            var hash = this.generateHash(keys(i))
            var workerID = hash % this.numOfWorkers
            values(i) = this.workers(workerID) ! get(keys(i),hash)
        end

        var returnValues = new[v](|keys|)
        repeat i <- |values| do
            returnValues(i) = get(values(i))
        end
        returnValues
    end

    def elements() : [v]

        var workerdata = new[Fut[[v]]](this.numOfWorkers)
        repeat i <- this.numOfWorkers do
            workerdata(i) = this.workers(i) ! elements()
        end

        var totalSize = 0
        var workerdataResult = new[[v]](this.numOfWorkers)
        repeat i <- this.numOfWorkers do
            workerdataResult(i) = get(workerdata(i))
            totalSize += |workerdataResult(i)|
        end

        var result = new[v](totalSize)
        var index = 0
        for worker <- workerdataResult do
            for element <- worker do
                result(index) = element
                index += 1
            end
        end
        result
    end

end
