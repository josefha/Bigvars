

module Supervisorh

import Siphash
import Hasher
import Workerh

linear class Supervisor[k,v]
    var numOfWorkers: int
    var workers : [(Worker[k,v])]
    var workerSize : int
    var tableSize : int
    var siphash: Siphash
    var hashFunction : k -> uint

    def init(f:k -> uint) : unit
        this.hashFunction = f
        this.workerSize = 64
        this.numOfWorkers = 4
        this.tableSize = this.workerSize*this.numOfWorkers
        this.siphash = new Siphash()
        this.workers = new[Worker[k,v]](this.numOfWorkers)
        this.initTable()
    end

    def copy() : Supervisor[k,v]
        var f = this.hashFunction
        var supr = new Supervisor[k,v](fun(key:k) => f(key))
        supr.workers = this.workers
        supr.tableSize = this.tableSize
        supr.workerSize = this.workerSize
        supr.numOfWorkers = this.numOfWorkers
        consume supr
    end

    def initTable() : unit
        repeat i <- this.numOfWorkers do
            this.workers(i) = new Worker[k,v](this.workerSize,i,this.hashFunction)
        end
    end

    def generateHash(key:k) : uint
        --val pointer = EMBED (uint) (uint64_t) #{key}.p; END
        this.siphash.hash(this.hashFunction(key))
    end

    def modulo(value : uint, mod : uint) : uint
      EMBED (uint)
        uint64_t value = (uint64_t) #{value};
              uint64_t mod   = (uint64_t) #{mod};
              (value % mod);

      END
    end

    def put(key:k,value:v) : Fut[unit]
        var hash = this.generateHash(key)
        var workerID = this.modulo(hash,this.numOfWorkers)
        this.workers(workerID) ! put(key,value,hash)
    end

    def get(key:k) : v
        var hash = this.generateHash(key)
        var workerID = this.modulo(hash,this.numOfWorkers)
        get(this.workers(workerID) ! get(key,hash))
    end

    def remove(key:k) : Fut[unit]
        var hash = this.generateHash(key)
        var workerID = this.modulo(hash,this.numOfWorkers)
        this.workers(workerID) ! remove(key,hash)
    end

    def getMany(keys:[k]) : [v]
        var values = new[Fut[v]](|keys|)
        repeat i <- |values| do
            var hash = this.generateHash(keys(i))
            var workerID = this.modulo(hash,this.numOfWorkers)
            values(i) = this.workers(workerID) ! get(keys(i),hash)
        end

        var returnValues = new[v](|keys|)
        repeat i <- |values| do
            returnValues(i) = get(values(i))
        end
        returnValues
    end

    def elements() : [v]
        var workerdata = new[Fut[[v]]](this.numOfWorkers)
        repeat i <- this.numOfWorkers do
            workerdata(i) = this.workers(i) ! elements()
        end

        var totalSize = 0
        var workerdataResult = new[[v]](this.numOfWorkers)
        repeat i <- this.numOfWorkers do
            workerdataResult(i) = get(workerdata(i))
            totalSize += |workerdataResult(i)|
        end

        var result = new[v](totalSize)
        var index = 0
        for worker <- workerdataResult do
            for element <- worker do
                result(index) = element
                index += 1
            end
        end
        result
    end

    def keys() : [k]
        var workerdata = new[Fut[[k]]](this.numOfWorkers)
        repeat i <- this.numOfWorkers do
            workerdata(i) = this.workers(i) ! keys()
        end

        var totalSize = 0
        var workerdataResult = new[[k]](this.numOfWorkers)
        repeat i <- this.numOfWorkers do
            workerdataResult(i) = get(workerdata(i))
            totalSize += |workerdataResult(i)|
        end

        var result = new[k](totalSize)
        var index = 0
        for worker <- workerdataResult do
            repeat i <- |worker| do
                result(index) = worker(i)
                index += 1
            end
        end
        result
    end

    def clear() : unit
        for worker <- this.workers do
            worker ! clear()
        end
    end

    def rehash() : unit
        for worker <- this.workers do
            worker ! rehash()
        end
    end

    def doubleSize() : unit
        this.workerSize = this.workerSize*2
        this.tableSize = this.workerSize*this.numOfWorkers

        for worker <- this.workers do
            worker ! doubleSize()
        end

    end

    def removeMany(keys:[k]) : unit
        repeat i <- |keys| do
            var hash = this.generateHash(keys(i))
            var workerID = this.modulo(hash,this.numOfWorkers)
            this.workers(workerID) ! remove(keys(i),hash)
        end
    end

    def hasKey(key:k) : bool
        var result = false
        var hash = this.generateHash(key)
        var workerID = this.modulo(hash,this.numOfWorkers)
        get(this.workers(workerID) ! hasKey(key,hash))
    end


    def contains(value:v) : bool
        var result = false
        for element <- this.elements() do
            if (value == element) then
                result = true
            end
        end
        result
    end

    -------------------------------------------------------

    def extend(key:k,value:v) : unit
        var hash = this.generateHash(key)
        var workerID = this.modulo(hash,this.numOfWorkers)
        get(this.workers(workerID) ! extend(key,value,hash))
    end

    def extendAll(key:k, values:[v]) : unit
        var hash = this.generateHash(key)
        var workerID = this.modulo(hash,this.numOfWorkers)
        this.workers(workerID) ! extendAll(key,values,hash)
    end

    def getValues(key:k) : [v]
        var hash = this.generateHash(key)
        var workerID = this.modulo(hash,this.numOfWorkers)
        get(this.workers(workerID) ! getValues(key,hash))
    end

    def mapper(m:(k,v)->[(v,k)]) : unit
        repeat i <- this.numOfWorkers do
            this.workers(i) ! mapper(m)
        end
    end

    def getInfo() : unit
        --var totalSize = 0
        for worker <- this.workers do
            --totalSize += get(worker ! getInfo())
            worker ! getInfo()
        end
        --println("Total Size: {}/{}", totalSize, this.tableSize)
    end
end
