
module Workerh

import HashEntry
import Siphash

import Bighash -- for mapper and reducer
import Combiner


active class Worker[k,v]
    var id : int
    var tableSize : int
    var filledEntries: int
    var table : [HashEntry[k,v]]
    var siphash : Siphash
    var hashFunction : k -> uint

    def init(size: int, id:int, f:k -> uint) : unit
        this.hashFunction = f
        this.filledEntries = 0
        this.tableSize = size
        this.id = id
        this.siphash = new Siphash()
        this.initTable()
    end

    def initTable() : unit
        this.table = new [HashEntry[k,v]](this.tableSize)
        repeat i <- this.tableSize do
            this.table(i) = new HashEntry[k,v]()
        end
    end

    def get(key:k,hashValue:uint) : v
        this.getEntry(hashValue).getValue()
    end

    def remove(key:k,hashValue:uint) : unit
        var hashentry = this.getEntry(hashValue)

        repeat i <- this.tableSize do
            if this.table(i).getHash() == hashValue then
                this.table(i) = new HashEntry[k,v]()
                this.filledEntries -= 1
            end
        end
    end

    def put(key:k,value:v,hashValue:uint) : unit
        this.resizeIfNeeded()
        var hashentry = this.getEntry(hashValue)
        hashentry.add(key,value,hashValue)

        if (hashentry.isEmpty()) then this.filledEntries += 1 end
    end

    def hasKey(key:k, hashValue:uint) : bool
        var result = false
        var hashentry = this.getEntry(hashValue)
        if hashentry.notEmpty() then
            result = true
        end
        result
    end

    def elements() : [v]
        var result = new [v](this.filledEntries)
        var index = 0
        repeat i <- this.tableSize do
            if this.table(i).notEmpty() then
                result(index) = this.table(i).getValue()
                index += 1
            end
        end
        result
    end

    def keys() : [k]
        var count = 0
        repeat i <- this.tableSize do
            if this.table(i).notEmpty() then
                count += 1
            end
        end

        var result = new [k](count)
        var index = 0
        repeat i <- this.tableSize do
            if this.table(i).notEmpty() then
                result(index) = this.table(i).getKey()
                index += 1
            end
        end
        result
    end

    def clear() : unit
        this.filledEntries = 0
        var newTable = new [HashEntry[k,v]](this.tableSize)
        repeat i <- this.tableSize do
            newTable(i) = new HashEntry[k,v]()
        end
        this.table = newTable
    end

    -- elements() here? needs to be redone.
    def rehash() : unit
        var elements = this.elements()
        var keys = this.keys()
        this.doubleSize()

        repeat i <- |elements| do
            var hash = this.generateHash(keys(i))
            this.put(keys(i),elements(i),hash)
        end
    end

    def extend(key:k,value:v,hashValue:uint) : unit
        this.resizeIfNeeded()
        var hashentry = this.getEntry(hashValue)
        hashentry.extend(key,value,hashValue)
        if (hashentry.isEmpty()) then this.filledEntries += 1 end
    end


    def extendAll(key:k, values:[v],hashValue:uint) : unit
        var hashentry = this.getEntry(hashValue)
        hashentry.extendAll(key,values,hashValue)
        if (hashentry.isEmpty()) then this.filledEntries += 1 end
    end

    def getValues(key:k,hashValue:uint) : [v]
        var hashentry = this.getEntry(hashValue)
        hashentry.getValues()
    end

    def getEntry(hashValue:uint) : HashEntry[k,v]
        var entryID = this.modulo(hashValue,this.tableSize)
        var hashentry = this.table(entryID)
        while ((hashentry.notEmpty()) && (hashentry.getHash() != hashValue)) do
            entryID = this.modulo(entryID+1,this.tableSize)
            hashentry = this.table(entryID)
        end
        hashentry
    end

    def doubleSize() : unit
        this.filledEntries = 0
        this.tableSize = this.tableSize*2
        var newTable = new [HashEntry[k,v]](this.tableSize)
        repeat i <- this.tableSize do
            newTable(i) = new HashEntry[k,v]()
        end
        this.table = newTable
    end

    def resizeIfNeeded() : unit
        if (this.tableSize - this.filledEntries < this.tableSize/4) then
            this.rehash()
        end
    end

    def generateHash(key:k) : uint
        this.siphash.hash(this.hashFunction(key))
    end

    def modulo(value : uint, mod : uint) : uint
      EMBED (uint)
        uint64_t value = (uint64_t) #{value};
              uint64_t mod   = (uint64_t) #{mod};
              (value % mod);

      END
    end

    ----- MapReduce functions ------
    def mapper[k2,v2](m:(k,v)->[(k2,v2)],r:(k2,[v2]) -> (k2,v2),bighash:Bighash[k2,v2]) : unit
        repeat i <- this.tableSize do
            if this.table(i).notEmpty() then
                var mapresult = this.table(i).map[k2,v2](m)
                var combiner = new Combiner[k2,v2](|mapresult|)

                for pair <- mapresult do
                    var hashfunction = bighash.hashFunction()
                    var hash = hashfunction(pair.0)
                    combiner.extend(pair.0,pair.1,hash)
                end

                var result = bighash.copy()
                combiner.combine(r,consume result)
            end
        end
    end

    def reducer(r:(k,[v]) -> (k,v),bighash:Bighash[k,v]) : unit
        repeat i <- this.tableSize do
            if this.table(i).notEmpty() then
                var result = this.table(i).reduce(r)
                var key = result.0
                var value = result.1
                bighash.put(key,value)
            end
        end
    end

    def mapperNoCombiner[k2,v2](m:(k,v)->[(k2,v2)], bighash:Bighash[k2,v2]) : unit
        repeat i <- this.tableSize do
            if this.table(i).notEmpty() then
                for result <- this.table(i).map[k2,v2](m) do
                    var key = result.0
                    var value = result.1
                    bighash.extend(key,value)
                end
            end
        end
    end
end
