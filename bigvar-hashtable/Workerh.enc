
module Workerh

import HashEntry
import Hasher

active class Worker[k,v]
    var id : int
    var tableSize : int
    var numberOfElements: int
    var table : [HashEntry[k,v]]

    def init(size: int, id:int) : unit
        this.numberOfElements = 0
        this.tableSize = size
        this.id = id
        this.initTable()
    end

    def initTable() : unit
        this.table = new [HashEntry[k,v]](this.tableSize)
        repeat i <- this.tableSize do
            this.table(i) = new HashEntry[k,v]()
        end
    end

    def getInfo() : int
        println("w: {} has: {}/{}", this.id, this.numberOfElements, this.tableSize)
        this.numberOfElements
    end

    def put(key:k,value:v,generatedHash:uint) : unit
        if (((this.numberOfElements+1)/this.tableSize) >= 0.7) then
            this.doubleSize()
        end

        var hash = (generatedHash) % this.tableSize
        var hashentry = this.table(hash)
        while ((hashentry.notEmpty()) && (hashentry.getKey() != key)) do
            hash = (hash+1) % this.tableSize
            hashentry = this.table(hash)
            --println("collision")
        end

        if (hashentry.getKey() != key) then
            this.numberOfElements += 1
        end
        this.table(hash).add(key,value)
    end

    def get(key:k,generatedHash:uint) : v
        var hash = (generatedHash) % this.tableSize
        var hashentry = this.table(hash)
        hashentry.getValue()
    end

    def elements() : [v]
        var result = new [v](this.numberOfElements)
        var index = 0
        repeat i <- this.tableSize do
            if this.table(i).notEmpty() then
                result(index) = this.table(i).getValue()
                index += 1
            end
        end
        result
    end

    def keys() : [k]
        var result = new [k](this.numberOfElements)
        var index = 0
        repeat i <- this.tableSize do
            if this.table(i).notEmpty() then
                result(index) = this.table(i).getKey()
                index += 1
            end
        end
        result
    end

    def doubleSize() : unit
        this.tableSize = this.tableSize*2
        var newTable = new [HashEntry[k,v]](this.tableSize)

        repeat i <- this.tableSize/2 do
            newTable(i) = this.table(i)
        end

        repeat i <- this.tableSize/2 do
            newTable(this.tableSize/2+i) = new HashEntry[k,v]()
        end
        this.table = newTable
    end
end
